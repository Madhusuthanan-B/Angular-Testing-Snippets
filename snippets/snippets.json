{
    "Test Component (Basic)": {
        "prefix": "jat-component-basic",
        "description": "Angular Component basic test setup to run in isolation (No Mocks)",
        "body": [
          "import { async, ComponentFixture, TestBed } from '@angular/core/testing';",
          "import { NO_ERRORS_SCHEMA } from '@angular/core';",
          "",
          "import { ReplaceWithYourComponent } from './ReplaceWithYourComponentPath';",
          "",
          "describe('ReplaceWithYourComponent: ', () => {",
          "\tlet component: ReplaceWithYourComponent;",
          "\tlet fixture: ComponentFixture<ReplaceWithYourComponent>;",
          "",
          "\tbeforeEach(async(() => {",
          "\t\tTestBed.configureTestingModule({",
          "\t\t\tdeclarations: [ReplaceWithYourComponent],",
          "\t\t\tproviders: [],",
          "\t\t\t schemas: [NO_ERRORS_SCHEMA]",
          "\t\t});",
          "\t}));",
          "",
          "\tbeforeEach(() => {",
          "\t\tfixture = TestBed.createComponent(ReplaceWithYourComponent);",
          "\t\tcomponent = fixture.componentInstance;",
          "\t\tfixture.detectChanges();",
          "\t});",
          "",
          "\tit('should be created', () => {",
          "\t\texpect(component).toBeTruthy();",
          "\t});",
          "",
          "});",
          ""
        ]
      },
    "Test Component (With MockService)": {
        "prefix": "jat-component-with-service-mock",
        "description": "Angular Component test setup to run in isolation with mock service returning observable",
        "body": [
          "import { async, ComponentFixture, TestBed } from '@angular/core/testing';",
          "import { NO_ERRORS_SCHEMA } from '@angular/core';",
          "import { of } from 'rxjs';",
          "",
          "import { ReplaceWithYourComponent } from './ReplaceWithYourComponentPath';",
          "import { ReplaceWithYourServiceToBeMocked } from './ReplaceWithYourServicePath';",
          "",
          "class NameOfYourMockService {",
          "\tmethodInTheServiceToBeMocked() {",
          "\t\t/* Pass the expected response within of()*/",
          "\t\treturn of();",
          "\t}",
          "}",
          "",
          "describe('ReplaceWithYourComponent: ', () => {",
          "\tlet component: ReplaceWithYourComponent;",
          "\tlet fixture: ComponentFixture<ReplaceWithYourComponent>;",
          "",
          "\tbeforeEach(async(() => {",
          "\t\tTestBed.configureTestingModule({",
          "\t\t\tdeclarations: [ReplaceWithYourComponent],",
          "\t\t\tproviders: [,",
          "\t\t\t\t{ provide: ReplaceWithYourServiceToBeMocked, useClass: NameOfYourMockService }",
          "\t\t\t],",
          "\t\t\tschemas: [NO_ERRORS_SCHEMA]",
          "\t\t});",
          "\t}));",
          "",
          "\tbeforeEach(() => {",
          "\t\tfixture = TestBed.createComponent(ReplaceWithYourComponent);",
          "\t\tcomponent = fixture.componentInstance;",
          "\t\tfixture.detectChanges();",
          "\t});",
          "",
          "\tit('should be created', () => {",
          "\t\texpect(component).toBeTruthy();",
          "\t});",
          "",
          "});",
          ""
        ]
      },
    "MockService Sample Setup Which returns success observable response": {
        "prefix": "jat-mock-observable-success-service",
        "description": "Mock service sample returning observable",
        "body": [
          "class NameOfYourMockService {",
          "\tmethodInTheServiceToBeMocked() {",
          "\t\t/* Pass the expected response within of()*/",
          "\t\treturn of();",
          "\t}",
          "}",
          ""
        ]
      },
    "Test Suite": {
        "prefix": "jat-suite",
        "description": "Jasmine Test Suite (Describe block)",
        "body": [
         "describe('MethodUnderTest()', () => {",
          "",
          "\tit('should ', () => {",
          "",
          "\t});",
          "",
         "});",
          ""
        ]
      },
    "Test Spec": {
        "prefix": "jat-spec",
        "description": "Jasmine Test Spec (it block)",
        "body": [
          "it('should ', () => {",
            "",
          "});",
          ""
        ]
      },
    "Spec to test timer methods": {
        "prefix": "jat-timer-spec",
        "description": "Jasmine Test Spec (it block) to test methods which runs timer.",
        "body": [
          "it('should ', fakeAsync(() => {",
            "\t// Act: Call your method which has setTimeOut / setInterval",
            "\ttick(/* Pass the wait time of your actual method*/);",
            "\t// Assert",
          "}));",
          ""
        ]
    },
    "Use Value Provider": {
        "prefix": "jat-use-value-provider",
        "description": "Angular useValue provider to inject mock value as dependency instead of an injection token or injected service.",
        "body": [
          "{ provide: 'Replace With Your Service or Injection Token', useValue: 'Replace with the value you need to mock.' }"
        ]
    },
    "Use Class Provider": {
      "prefix": "jat-use-class-provider",
      "description": "Angular useClass provider to inject a mock class as dependency instead of an injection token or injected service.",
      "body": [
        "{ provide: 'Replace With Your Service or Injection Token', useClass: 'Replace with your mock class.' }"
      ]
    },
    "Mock Router": {
      "prefix": "jat-mock-router",
      "description": "Mock Class to use as a mock for the injected Router class (Has minimal methods like navigate, navigateByUrl etc. These can be extended) along with a useClass provider which can be used in your TestBed provider.",
      "body": [
        "class MockRouter {",
        "\tnavigate(command: any[], extras?: any) { }",
        "\tnavigateByUrl(url: string, extras?: any) { }",
        "}",
        "",
        "const MOCK_ROUTER_PROVIDER = { provide: Router, useClass: MockRouter };",
        ""
      ]
    }
}